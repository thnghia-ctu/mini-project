import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC

from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4

# C√ÅC H√ÄM C·∫¶N THI·∫æT

def export_pdf(results):
    # ƒêƒÉng k√Ω font TTF h·ªó tr·ª£ Unicode ti·∫øng Vi·ªát
    pdfmetrics.registerFont(TTFont('Times', 'times.ttf'))  # ho·∫∑c 'arial.ttf'

    doc = SimpleDocTemplate("results/report.pdf", pagesize=A4)
    styles = getSampleStyleSheet()
    # √Åp d·ª•ng font 'Times' cho t·∫•t c·∫£ c√°c style trong stylesheets
    for style_name in styles.byName:
        styles[style_name].fontName = 'Times'

    elements = []

    #  Ti√™u ƒë·ªÅ
    elements.append(Paragraph("<b>PH√ÇN T√çCH & D·ª∞ ƒêO√ÅN D·ªÆ LI·ªÜU IRIS</b>", styles['Title']))
    elements.append(Spacer(1, 12))

     # Bi·ªÉu ƒë·ªì tr·ª±c quan h√≥a dataset
    scatter_desc = """
        ƒê·ªÉ c√≥ c√°i nh√¨n tr·ª±c quan v·ªÅ t·∫≠p d·ªØ li·ªáu, ch√∫ng ta c·∫ßn hi·ªÉn th·ªã d·ªØ li·ªáu. C√≥ r·∫•t nhi·ªÅu ph∆∞∆°ng ph√°p tr·ª±c quan h√≥a
        d·ªØ li·ªáu, tuy nhi√™n, ƒë·ªëi v·ªõi t·∫≠p Iris, t√¥i d√πng s∆° ƒë·ªì ph√¢n t√°n ƒë·ªÉ hi·ªÉn th·ªã d·ªØ li·ªáu
        <br/><br/>
        Bi·ªÉu ƒë·ªì ph√¢n t√°n (Scatter Plot) th·ªÉ hi·ªán m·ªëi quan h·ªá gi·ªØa c√°c c·∫∑p ƒë·∫∑c tr∆∞ng trong t·∫≠p d·ªØ li·ªáu <b>Iris</b>.
        M·ªói ƒëi·ªÉm d·ªØ li·ªáu ƒë·∫°i di·ªán cho m·ªôt b√¥ng hoa, ƒë∆∞·ª£c t√¥ m√†u theo <b>lo√†i (species)</b>.        
    """
    elements.append(Paragraph(scatter_desc, styles['Normal']))
    elements.append(Spacer(1, 12))
    elements.append(Image("results/chart.png", width=400, height=300))
    elements.append(Spacer(1, 12))

    # B·∫£ng k·∫øt qu·∫£
    desc = "B√°o c√°o n√†y tr√¨nh b√†y k·∫øt qu·∫£ hu·∫•n luy·ªán v√† so s√°nh 5 m√¥ h√¨nh Machine Learning tr√™n t·∫≠p d·ªØ li·ªáu IRIS."
    elements.append(Paragraph(desc, styles['Normal']))
    elements.append(Spacer(1, 12))
   
    table_data = [["M√¥ h√¨nh", "ƒê·ªô ch√≠nh x√°c"]] + [[name, round(info["accuracy"], 3)] for name, info in results.items()]
    table = Table(table_data)
    elements.append(table)
    elements.append(Spacer(1, 12))

    # Bi·ªÉu ƒë·ªì
    elements.append(Image("results/confusion_matrix.png", width=400, height=300))
    elements.append(Spacer(1, 12))

    # 5Ô∏è‚É£ K·∫øt lu·∫≠n
    best_model = max(results, key=lambda x: results[x]['accuracy'])
    conclusion = f"M√¥ h√¨nh c√≥ hi·ªáu su·∫•t cao nh·∫•t l√†: <b>{best_model}</b>."
    elements.append(Paragraph(conclusion, styles['Normal']))

    # L∆∞u PDF
    doc.build(elements)

# CODE CH√çNH
st.markdown(
    """
    <h1 style='text-align: center; color: #2E86C1;'>
        H·ªÜ TH·ªêNG PH√ÇN T√çCH V√Ä D·ª∞ ƒêO√ÅN TR√äN D·ªÆ LI·ªÜU IRIS
    </h1>
    """,
    unsafe_allow_html=True
)

st.title("Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu")

# ƒê·ªçc d·ªØ li·ªáu train v√† test
train = pd.read_csv("data\iris\iris.trn", header=None)
test  = pd.read_csv("data\iris\iris.tst", header=None)

# ƒê·∫∑t t√™n c·ªôt
columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
features= ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
label='species'
train.columns = columns
test.columns = columns

# Chia ƒë·∫∑c tr∆∞ng v√† nh√£n
X_train = train[features]
y_train = train[label]

X_test = test[features]
y_test = test[label]

# Hi·ªÉn th·ªã b·∫£ng
st.dataframe(train)

st.title("Ph√¢n t√≠ch d·ªØ li·ªáu Iris")
# Ch·ªçn bi·∫øn X v√† Y
col1, col2 = st.columns(2)
x_var = col1.selectbox("Ch·ªçn tr·ª•c X:", ['All']+features, index=0)
y_var = col2.selectbox("Ch·ªçn tr·ª•c Y:", ['All']+features, index=0)

len_cols=len(features)
if x_var == "All" and y_var == "All":
    fig =sns.pairplot(
        train,
        hue='species',       # t√¥ m√†u theo lo√†i hoa
        palette='Set2',      # b·∫£ng m√†u
        diag_kind='kde',     # bi·ªÉu ƒë·ªì m·∫≠t ƒë·ªô ·ªü ƒë∆∞·ªùng ch√©o (c√≥ th·ªÉ ƒë·ªïi 'hist')
        corner=True          # n·∫øu True th√¨ ch·ªâ v·∫Ω n·ª≠a d∆∞·ªõi
    )
elif x_var == "All" and y_var != "All":
    st.subheader(f"So s√°nh t·∫•t c·∫£ X v·ªõi '{y_var}'")
    fig, axes=plt.subplots(len_cols-1, 1, figsize=(4, 15))
    index_ax=0
    for i, col in enumerate(features):
        if col!=y_var:
            sns.scatterplot(data=train, x=col, y=y_var, hue='species', ax=axes[index_ax])
            index_ax=index_ax+1

elif y_var == "All" and x_var != "All":
    st.subheader(f"So s√°nh '{x_var}' v·ªõi t·∫•t c·∫£ Y")
    fig, axes = plt.subplots(1, len_cols-1, figsize=(15, 4))
    index_ax=0
    for i, col in enumerate(features):
        if col!=x_var:
            sns.scatterplot(data=train, x=x_var, y=col, hue='species', ax=axes[index_ax])
            index_ax=index_ax+1

else:
    st.subheader(f"Bi·ªÉu ƒë·ªì t√°n x·∫°: {x_var} vs {y_var}")
    fig, ax = plt.subplots()
    sns.scatterplot(data=train, x=x_var, y=y_var, hue='species',  palette='Set2', ax=ax)

# === L∆∞u bi·ªÉu ƒë·ªì ra file PNG ===
chart_path = f"results/chart.png"
plt.savefig(chart_path, bbox_inches="tight")  # L∆∞u ·∫£nh
st.pyplot(fig)


# Danh s√°ch m√¥ h√¨nh
models = {
    "Logistic Regression": LogisticRegression(),
    "Decision Tree": DecisionTreeClassifier(),
    "KNN":KNeighborsClassifier(n_neighbors=3),
    "NB":GaussianNB(),
    "SVM":SVC()
}

if "results" not in st.session_state:
    st.session_state.results = {}
    for name, model in models.items():
        model.fit(X_train, y_train)
        y_pred = model.predict(X_test)
        st.session_state.results[name] = {
            "model": model,
            "y_pred": y_pred,
            "accuracy": accuracy_score(y_test, y_pred)
        }

results = st.session_state.results

st.title("Hu·∫•n luy·ªán m√¥ h√¨nh")
mol=st.selectbox("Ch·ªçn m√¥ h√¨nh hu·∫•n luy·ªán: ", models.keys())


# Hi·ªÉn th·ªã ƒë·ªô ch√≠nh x√°c
st.write(f"**ƒê·ªô ch√≠nh x√°c (Accuracy)**: {results[mol]['accuracy']:.3f}")

report_dict = classification_report(y_test, results[mol]['y_pred'], output_dict=True)
report_df = pd.DataFrame(report_dict).transpose()
st.dataframe(report_df)

# V·∫Ω ma tr·∫≠n nh·∫ßm l·∫´n
cm = confusion_matrix(y_test, results[mol]['y_pred'])
fig, ax = plt.subplots()
sns.heatmap(cm, annot=True, cmap="Blues", fmt="d", ax=ax)
ax.set_title(f"Ma tr·∫≠n nh·∫ßm l·∫´n: {mol}")
ax.set_xlabel("D·ª± ƒëo√°n")
ax.set_ylabel("Th·ª±c t·∫ø")

# === L∆∞u bi·ªÉu ƒë·ªì ra file PNG ===
chart_path = "results/confusion_matrix.png"
plt.savefig(chart_path, bbox_inches="tight")  # L∆∞u ·∫£nh

# Hi·ªÉn th·ªã ma tr·∫≠n nh·∫±m l·∫´n
st.pyplot(fig)

# T·∫°o n√∫t b·∫•m xu·∫•t pdf
btn = st.button("üìÑ Xu·∫•t PDF", key="export_pdf")
st.markdown("""
    <style>
    .st-key-export_pdf {
        position: fixed;
        bottom: 25px;
        right: 25px;
        z-index: 999;
        button {
            background-color: #9ecfd4
        }
    }
    </style>
""", unsafe_allow_html=True)

if btn:
    export_pdf(results)
    st.success("‚úÖ ƒê√£ t·∫°o file PDF th√†nh c√¥ng!")
